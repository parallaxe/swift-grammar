<?xml version="1.0"?>
<rules>
  <rule name="statement">
    <production>
      <rule_reference ruleName="expression" optional="false"/>
      <keyword token=";"/>
    </production>
    <production>
      <rule_reference ruleName="declaration" optional="false"/>
      <keyword token=";"/>
    </production>
    <production>
      <rule_reference ruleName="loop-statement" optional="false"/>
      <keyword token=";"/>
    </production>
    <production>
      <rule_reference ruleName="branch-statement" optional="false"/>
      <keyword token=";"/>
    </production>
    <production>
      <rule_reference ruleName="labeled-statement" optional="false"/>
      <keyword token=";"/>
    </production>
    <production>
      <rule_reference ruleName="control-transfer-statement" optional="false"/>
      <keyword token=";"/>
    </production>
    <production>
      <rule_reference ruleName="defer-statement" optional="false"/>
      <keyword token=";"/>
    </production>
    <production>
      <rule_reference ruleName="do-statement" optional="false"/>
      <keyword token=":"/>
    </production>
    <production>
      <rule_reference ruleName="compiler-control-statement" optional="false"/>
    </production>
  </rule>
  <rule name="statements">
    <production>
      <rule_reference ruleName="statement" optional="false"/>
      <rule_reference ruleName="statements" optional="true"/>
    </production>
  </rule>
  <rule name="loop-statement">
    <production>
      <rule_reference ruleName="for-statement" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="for-in-statement" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="while-statement" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="repeat-while-statement" optional="false"/>
    </production>
  </rule>
  <rule name="for-statement">
    <production>
      <keyword token="for"/>
      <rule_reference ruleName="for-init" optional="true"/>
      <keyword token=";"/>
      <rule_reference ruleName="expression" optional="true"/>
      <keyword token=";"/>
      <rule_reference ruleName="expression" optional="true"/>
      <rule_reference ruleName="code-block" optional="false"/>
    </production>
    <production>
      <keyword token="for"/>
      <keyword token="("/>
      <rule_reference ruleName="for-init" optional="true"/>
      <keyword token=";"/>
      <rule_reference ruleName="expression" optional="true"/>
      <keyword token=";"/>
      <rule_reference ruleName="expression" optional="true"/>
      <keyword token=")"/>
      <rule_reference ruleName="code-block" optional="false"/>
    </production>
  </rule>
  <rule name="for-init">
    <production>
      <rule_reference ruleName="variable-declaration" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="expression-list" optional="false"/>
    </production>
  </rule>
  <rule name="for-in-statement">
    <production>
      <keyword token="for"/>
      <keyword token="case"/>
      <rule_reference ruleName="pattern" optional="false"/>
      <keyword token="in"/>
      <rule_reference ruleName="expression" optional="false"/>
      <rule_reference ruleName="where-clause" optional="true"/>
      <rule_reference ruleName="code-block" optional="false"/>
    </production>
  </rule>
  <rule name="while-statement">
    <production>
      <keyword token="while"/>
      <rule_reference ruleName="condition-clause" optional="false"/>
      <rule_reference ruleName="code-block" optional="false"/>
    </production>
  </rule>
  <rule name="condition-clause">
    <production>
      <rule_reference ruleName="expression" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="expression" optional="false"/>
      <keyword token=","/>
      <rule_reference ruleName="condition-list" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="condition-list" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="availability-condition" optional="false"/>
      <keyword token=","/>
      <rule_reference ruleName="expression" optional="false"/>
    </production>
  </rule>
  <rule name="condition-list">
    <production>
      <rule_reference ruleName="condition" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="condition" optional="false"/>
      <keyword token=","/>
      <rule_reference ruleName="condition-list" optional="false"/>
    </production>
  </rule>
  <rule name="condition">
    <production>
      <rule_reference ruleName="availability-condition" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="case-condition" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="optional-binding-condition" optional="false"/>
    </production>
  </rule>
  <rule name="case-condition">
    <production>
      <keyword token="case"/>
      <rule_reference ruleName="pattern" optional="false"/>
      <rule_reference ruleName="initializer" optional="false"/>
      <rule_reference ruleName="where-clause" optional="true"/>
    </production>
  </rule>
  <rule name="optional-binding-condition">
    <production>
      <rule_reference ruleName="optional-binding-head" optional="false"/>
      <rule_reference ruleName="optional-binding-continuation-list" optional="true"/>
      <rule_reference ruleName="where-clause" optional="true"/>
    </production>
  </rule>
  <rule name="optional-binding-head">
    <production>
      <keyword token="let"/>
      <rule_reference ruleName="pattern" optional="false"/>
      <rule_reference ruleName="initializer" optional="false"/>
    </production>
    <production>
      <keyword token="var"/>
      <rule_reference ruleName="pattern" optional="false"/>
      <rule_reference ruleName="initializer" optional="false"/>
    </production>
  </rule>
  <rule name="optional-binding-continuation-list">
    <production>
      <rule_reference ruleName="optional-binding-continuation" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="optional-binding-continuation" optional="false"/>
      <keyword token=","/>
      <rule_reference ruleName="optional-binding-continuation-list" optional="false"/>
    </production>
  </rule>
  <rule name="optional-binding-continuation">
    <production>
      <rule_reference ruleName="pattern" optional="false"/>
      <rule_reference ruleName="initializer" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="optional-binding-head" optional="false"/>
    </production>
  </rule>
  <rule name="repeat-while-statement">
    <production>
      <keyword token="repeat"/>
      <rule_reference ruleName="code-block" optional="false"/>
      <keyword token="while"/>
      <rule_reference ruleName="expression" optional="false"/>
    </production>
  </rule>
  <rule name="branch-statement">
    <production>
      <rule_reference ruleName="if-statement" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="guard-statement" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="switch-statement" optional="false"/>
    </production>
  </rule>
  <rule name="if-statement">
    <production>
      <keyword token="if"/>
      <rule_reference ruleName="condition-clause" optional="false"/>
      <rule_reference ruleName="code-block" optional="false"/>
      <rule_reference ruleName="else-clause" optional="true"/>
    </production>
  </rule>
  <rule name="else-clause">
    <production>
      <keyword token="else"/>
      <rule_reference ruleName="code-block" optional="false"/>
    </production>
    <production>
      <keyword token="else"/>
      <rule_reference ruleName="if-statement" optional="false"/>
    </production>
  </rule>
  <rule name="guard-statement">
    <production>
      <keyword token="guard"/>
      <rule_reference ruleName="condition-clause" optional="false"/>
      <keyword token="else"/>
      <rule_reference ruleName="code-block" optional="false"/>
    </production>
  </rule>
  <rule name="switch-statement">
    <production>
      <keyword token="switch"/>
      <rule_reference ruleName="expression" optional="false"/>
      <keyword token="{"/>
      <rule_reference ruleName="switch-cases" optional="true"/>
      <keyword token="}"/>
    </production>
  </rule>
  <rule name="switch-cases">
    <production>
      <rule_reference ruleName="switch-case" optional="false"/>
      <rule_reference ruleName="switch-cases" optional="true"/>
    </production>
  </rule>
  <rule name="switch-case">
    <production>
      <rule_reference ruleName="case-label" optional="false"/>
      <rule_reference ruleName="statements" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="default-label" optional="false"/>
      <rule_reference ruleName="statements" optional="false"/>
    </production>
  </rule>
  <rule name="case-label">
    <production>
      <keyword token="case"/>
      <rule_reference ruleName="case-item-list" optional="false"/>
      <keyword token=":"/>
    </production>
  </rule>
  <rule name="case-item-list">
    <production>
      <rule_reference ruleName="pattern" optional="false"/>
      <rule_reference ruleName="where-clause" optional="true"/>
    </production>
    <production>
      <rule_reference ruleName="pattern" optional="false"/>
      <rule_reference ruleName="where-clause" optional="true"/>
      <keyword token=","/>
      <rule_reference ruleName="case-item-list" optional="false"/>
    </production>
  </rule>
  <rule name="default-label">
    <production>
      <keyword token="default"/>
      <keyword token=":"/>
    </production>
  </rule>
  <rule name="where-clause">
    <production>
      <keyword token="where"/>
      <rule_reference ruleName="where-expression" optional="false"/>
    </production>
  </rule>
  <rule name="where-expression">
    <production>
      <rule_reference ruleName="expression" optional="false"/>
    </production>
  </rule>
  <rule name="labeled-statement">
    <production>
      <rule_reference ruleName="statement-label" optional="false"/>
      <rule_reference ruleName="loop-statement" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="statement-label" optional="false"/>
      <rule_reference ruleName="if-statement" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="statement-label" optional="false"/>
      <rule_reference ruleName="switch-statement" optional="false"/>
    </production>
  </rule>
  <rule name="statement-label">
    <production>
      <rule_reference ruleName="label-name" optional="false"/>
      <keyword token=":"/>
    </production>
  </rule>
  <rule name="label-name">
    <production>
      <rule_reference ruleName="identifier" optional="false"/>
    </production>
  </rule>
  <rule name="control-transfer-statement">
    <production>
      <rule_reference ruleName="break-statement" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="continue-statement" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="fallthrough-statement" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="return-statement" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="throw-statement" optional="false"/>
    </production>
  </rule>
  <rule name="break-statement">
    <production>
      <keyword token="break"/>
      <rule_reference ruleName="label-name" optional="true"/>
    </production>
  </rule>
  <rule name="continue-statement">
    <production>
      <keyword token="continue"/>
      <rule_reference ruleName="label-name" optional="true"/>
    </production>
  </rule>
  <rule name="fallthrough-statement">
    <production>
      <keyword token="fallthrough"/>
    </production>
  </rule>
  <rule name="return-statement">
    <production>
      <keyword token="return"/>
      <rule_reference ruleName="expression" optional="true"/>
    </production>
  </rule>
  <rule name="availability-condition">
    <production>
      <keyword token="available"/>
      <keyword token="("/>
      <rule_reference ruleName="availability-arguments" optional="false"/>
      <keyword token=")"/>
    </production>
  </rule>
  <rule name="availability-arguments">
    <production>
      <rule_reference ruleName="availability-argument" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="availability-argument" optional="false"/>
      <keyword token=","/>
      <rule_reference ruleName="availability-arguments" optional="false"/>
    </production>
  </rule>
  <rule name="availability-argument">
    <production>
      <rule_reference ruleName="platform-name" optional="false"/>
      <rule_reference ruleName="platform-version" optional="false"/>
    </production>
    <production>
      <keyword token="*"/>
    </production>
  </rule>
  <rule name="platform-name">
    <production>
      <keyword token="iOS"/>
    </production>
    <production>
      <keyword token="iOSApplicationExtension"/>
    </production>
    <production>
      <keyword token="OSX"/>
    </production>
    <production>
      <keyword token="OSXApplicationExtension"/>
    </production>
    <production>
      <keyword token="watchOS"/>
    </production>
  </rule>
  <rule name="platform-version">
    <production>
      <rule_reference ruleName="decimal-digits" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="decimal-digits" optional="false"/>
      <keyword token="."/>
      <rule_reference ruleName="decimal-digits" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="decimal-digits" optional="false"/>
      <keyword token="."/>
      <rule_reference ruleName="decimal-digits" optional="false"/>
      <keyword token="."/>
      <rule_reference ruleName="decimal-digits" optional="false"/>
    </production>
  </rule>
  <rule name="throw-statement">
    <production>
      <keyword token="throw"/>
      <rule_reference ruleName="expression" optional="false"/>
    </production>
  </rule>
  <rule name="defer-statement">
    <production>
      <keyword token="defer"/>
      <rule_reference ruleName="code-block" optional="false"/>
    </production>
  </rule>
  <rule name="do-statement">
    <production>
      <keyword token="do"/>
      <rule_reference ruleName="code-block" optional="false"/>
      <rule_reference ruleName="catch-clauses" optional="true"/>
    </production>
  </rule>
  <rule name="catch-clauses">
    <production>
      <rule_reference ruleName="catch-clause" optional="false"/>
      <rule_reference ruleName="catch-clauses" optional="true"/>
    </production>
  </rule>
  <rule name="catch-clause">
    <production>
      <keyword token="catch"/>
      <rule_reference ruleName="pattern" optional="true"/>
      <rule_reference ruleName="where-clause" optional="true"/>
      <rule_reference ruleName="code-block" optional="false"/>
    </production>
  </rule>
  <rule name="compiler-control-statement">
    <production>
      <rule_reference ruleName="build-configuration-statement" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="line-control-statement" optional="false"/>
    </production>
  </rule>
  <rule name="build-configuration-statement">
    <production>
      <keyword token="if"/>
      <rule_reference ruleName="build-configuration" optional="false"/>
      <rule_reference ruleName="statements" optional="true"/>
      <rule_reference ruleName="build-configuration-elseif-clauses" optional="true"/>
      <rule_reference ruleName="build-configuration-else-clause" optional="true"/>
      <keyword token="endif"/>
    </production>
  </rule>
  <rule name="build-configuration-elseif-clauses">
    <production>
      <rule_reference ruleName="build-configuration-elseif-clause" optional="false"/>
      <rule_reference ruleName="build-configuration-elseif-clauses" optional="true"/>
    </production>
  </rule>
  <rule name="build-configuration-elseif-clause">
    <production>
      <keyword token="elseif"/>
      <rule_reference ruleName="build-configuration" optional="false"/>
      <rule_reference ruleName="statements" optional="true"/>
    </production>
  </rule>
  <rule name="build-configuration-else-clause">
    <production>
      <keyword token="else"/>
      <rule_reference ruleName="statements" optional="true"/>
    </production>
  </rule>
  <rule name="build-configuration">
    <production>
      <rule_reference ruleName="platform-testing-function" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="identifier" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="boolean-literal" optional="false"/>
    </production>
    <production>
      <keyword token="("/>
      <rule_reference ruleName="build-configuration" optional="false"/>
      <keyword token=")"/>
    </production>
    <production>
      <keyword token="!"/>
      <rule_reference ruleName="build-configuration" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="build-configuration" optional="false"/>
      <keyword token="&amp;&amp;"/>
      <rule_reference ruleName="build-configuration" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="build-configuration" optional="false"/>
      <keyword token="||"/>
      <rule_reference ruleName="build-configuration" optional="false"/>
    </production>
  </rule>
  <rule name="platform-testing-function">
    <production>
      <keyword token="os"/>
      <keyword token="("/>
      <rule_reference ruleName="operating-system" optional="false"/>
      <keyword token=")"/>
    </production>
    <production>
      <keyword token="arch"/>
      <keyword token="("/>
      <rule_reference ruleName="architecture" optional="false"/>
      <keyword token=")"/>
    </production>
  </rule>
  <rule name="operating-system">
    <production>
      <keyword token="OSX"/>
    </production>
    <production>
      <keyword token="iOS"/>
    </production>
    <production>
      <keyword token="watchOS"/>
    </production>
    <production>
      <keyword token="tvOS"/>
    </production>
  </rule>
  <rule name="architecture">
    <production>
      <keyword token="i386"/>
    </production>
    <production>
      <keyword token="x86_64"/>
    </production>
    <production>
      <keyword token="arm"/>
    </production>
    <production>
      <keyword token="arm64"/>
    </production>
  </rule>
  <rule name="line-control-statement">
    <production>
      <keyword token="line"/>
    </production>
    <production>
      <keyword token="line"/>
      <rule_reference ruleName="line-number" optional="false"/>
      <rule_reference ruleName="file-name" optional="false"/>
    </production>
  </rule>
  <rule name="line-number">
    <production>
      <literal>
        <range>0..9</range>
      </literal>
    </production>
  </rule>
  <rule name="file-name">
    <production>
      <rule_reference ruleName="static-string-literal" optional="false"/>
    </production>
  </rule>
  <rule name="generic-parameter-clause">
    <production>
      <keyword token="&lt;"/>
      <rule_reference ruleName="generic-parameter-list" optional="false"/>
      <rule_reference ruleName="requirement-clause" optional="true"/>
      <keyword token="&gt;"/>
    </production>
  </rule>
  <rule name="generic-parameter-list">
    <production>
      <rule_reference ruleName="generic-parameter" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="generic-parameter" optional="false"/>
      <keyword token=","/>
      <rule_reference ruleName="generic-parameter-list" optional="false"/>
    </production>
  </rule>
  <rule name="generic-parameter">
    <production>
      <rule_reference ruleName="type-name" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="type-name" optional="false"/>
      <keyword token=":"/>
      <rule_reference ruleName="type-identifier" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="type-name" optional="false"/>
      <keyword token=":"/>
      <rule_reference ruleName="protocol-composition-type" optional="false"/>
    </production>
  </rule>
  <rule name="requirement-clause">
    <production>
      <keyword token="where"/>
      <rule_reference ruleName="requirement-list" optional="false"/>
    </production>
  </rule>
  <rule name="requirement-list">
    <production>
      <rule_reference ruleName="requirement" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="requirement" optional="false"/>
      <keyword token=","/>
      <rule_reference ruleName="requirement-list" optional="false"/>
    </production>
  </rule>
  <rule name="requirement">
    <production>
      <rule_reference ruleName="conformance-requirement" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="same-type-requirement" optional="false"/>
    </production>
  </rule>
  <rule name="conformance-requirement">
    <production>
      <rule_reference ruleName="type-identifier" optional="false"/>
      <keyword token=":"/>
      <rule_reference ruleName="type-identifier" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="type-identifier" optional="false"/>
      <keyword token=":"/>
      <rule_reference ruleName="protocol-composition-type" optional="false"/>
    </production>
  </rule>
  <rule name="same-type-requirement">
    <production>
      <rule_reference ruleName="type-identifier" optional="false"/>
      <keyword token="=="/>
      <rule_reference ruleName="type" optional="false"/>
    </production>
  </rule>
  <rule name="generic-argument-clause">
    <production>
      <keyword token="&lt;"/>
      <rule_reference ruleName="generic-argument-list" optional="false"/>
      <keyword token="&gt;"/>
    </production>
  </rule>
  <rule name="generic-argument-list">
    <production>
      <rule_reference ruleName="generic-argument" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="generic-argument" optional="false"/>
      <keyword token=","/>
      <rule_reference ruleName="generic-argument-list" optional="false"/>
    </production>
  </rule>
  <rule name="generic-argument">
    <production>
      <rule_reference ruleName="type" optional="false"/>
    </production>
  </rule>
  <rule name="declaration">
    <production>
      <rule_reference ruleName="import-declaration" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="constant-declaration" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="variable-declaration" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="typealias-declaration" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="function-declaration" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="enum-declaration" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="struct-declaration" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="class-declaration" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="protocol-declaration" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="initializer-declaration" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="deinitializer-declaration" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="extension-declaration" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="subscript-declaration" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="operator-declaration" optional="false"/>
    </production>
  </rule>
  <rule name="declarations">
    <production>
      <rule_reference ruleName="declaration" optional="false"/>
      <rule_reference ruleName="declarations" optional="true"/>
    </production>
  </rule>
  <rule name="top-level-declaration">
    <production>
      <rule_reference ruleName="statements" optional="true"/>
    </production>
  </rule>
  <rule name="code-block">
    <production>
      <keyword token="{"/>
      <rule_reference ruleName="statements" optional="true"/>
      <keyword token="}"/>
    </production>
  </rule>
  <rule name="import-declaration">
    <production>
      <rule_reference ruleName="attributes" optional="true"/>
      <keyword token="import"/>
      <rule_reference ruleName="import-kind" optional="true"/>
      <rule_reference ruleName="import-path" optional="false"/>
    </production>
  </rule>
  <rule name="import-kind">
    <production>
      <keyword token="typealias"/>
    </production>
    <production>
      <keyword token="struct"/>
    </production>
    <production>
      <keyword token="class"/>
    </production>
    <production>
      <keyword token="enum"/>
    </production>
    <production>
      <keyword token="protocol"/>
    </production>
    <production>
      <keyword token="var"/>
    </production>
    <production>
      <keyword token="func"/>
    </production>
  </rule>
  <rule name="import-path">
    <production>
      <rule_reference ruleName="import-path-identifier" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="import-path-identifier" optional="false"/>
      <keyword token="."/>
      <rule_reference ruleName="import-path" optional="false"/>
    </production>
  </rule>
  <rule name="import-path-identifier">
    <production>
      <rule_reference ruleName="identifier" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="operator" optional="false"/>
    </production>
  </rule>
  <rule name="constant-declaration">
    <production>
      <rule_reference ruleName="attributes" optional="true"/>
      <rule_reference ruleName="declaration-modifiers" optional="true"/>
      <keyword token="let"/>
      <rule_reference ruleName="pattern-initializer-list" optional="false"/>
    </production>
  </rule>
  <rule name="pattern-initializer-list">
    <production>
      <rule_reference ruleName="pattern-initializer" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="pattern-initializer" optional="false"/>
      <keyword token=","/>
      <rule_reference ruleName="pattern-initializer-list" optional="false"/>
    </production>
  </rule>
  <rule name="pattern-initializer">
    <production>
      <rule_reference ruleName="pattern" optional="false"/>
      <rule_reference ruleName="initializer" optional="true"/>
    </production>
  </rule>
  <rule name="initializer">
    <production>
      <keyword token="="/>
      <rule_reference ruleName="expression" optional="false"/>
    </production>
  </rule>
  <rule name="variable-declaration">
    <production>
      <rule_reference ruleName="variable-declaration-head" optional="false"/>
      <rule_reference ruleName="pattern-initializer-list" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="variable-declaration-head" optional="false"/>
      <rule_reference ruleName="variable-name" optional="false"/>
      <rule_reference ruleName="type-annotation" optional="false"/>
      <rule_reference ruleName="code-block" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="variable-declaration-head" optional="false"/>
      <rule_reference ruleName="variable-name" optional="false"/>
      <rule_reference ruleName="type-annotation" optional="false"/>
      <rule_reference ruleName="getter-setter-block" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="variable-declaration-head" optional="false"/>
      <rule_reference ruleName="variable-name" optional="false"/>
      <rule_reference ruleName="type-annotation" optional="false"/>
      <rule_reference ruleName="getter-setter-keyword-block" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="variable-declaration-head" optional="false"/>
      <rule_reference ruleName="variable-name" optional="false"/>
      <rule_reference ruleName="initializer" optional="false"/>
      <rule_reference ruleName="willSet-didSet-block" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="variable-declaration-head" optional="false"/>
      <rule_reference ruleName="variable-name" optional="false"/>
      <rule_reference ruleName="type-annotation" optional="false"/>
      <rule_reference ruleName="initializer" optional="true"/>
      <rule_reference ruleName="willSet-didSet-block" optional="false"/>
    </production>
  </rule>
  <rule name="variable-declaration-head">
    <production>
      <rule_reference ruleName="attributes" optional="true"/>
      <rule_reference ruleName="declaration-modifiers" optional="true"/>
      <keyword token="var"/>
    </production>
  </rule>
  <rule name="variable-name">
    <production>
      <rule_reference ruleName="identifier" optional="false"/>
    </production>
  </rule>
  <rule name="getter-setter-block">
    <production>
      <rule_reference ruleName="code-block" optional="false"/>
    </production>
    <production>
      <keyword token="{"/>
      <rule_reference ruleName="getter-clause" optional="false"/>
      <rule_reference ruleName="setter-clause" optional="true"/>
      <keyword token="}"/>
    </production>
    <production>
      <keyword token="{"/>
      <rule_reference ruleName="setter-clause" optional="false"/>
      <rule_reference ruleName="getter-clause" optional="false"/>
      <keyword token="}"/>
    </production>
  </rule>
  <rule name="getter-clause">
    <production>
      <rule_reference ruleName="attributes" optional="true"/>
      <keyword token="get"/>
      <rule_reference ruleName="code-block" optional="false"/>
    </production>
  </rule>
  <rule name="setter-clause">
    <production>
      <rule_reference ruleName="attributes" optional="true"/>
      <keyword token="set"/>
      <rule_reference ruleName="setter-name" optional="true"/>
      <rule_reference ruleName="code-block" optional="false"/>
    </production>
  </rule>
  <rule name="setter-name">
    <production>
      <keyword token="("/>
      <rule_reference ruleName="identifier" optional="false"/>
      <keyword token=")"/>
    </production>
  </rule>
  <rule name="getter-setter-keyword-block">
    <production>
      <keyword token="{"/>
      <rule_reference ruleName="getter-keyword-clause" optional="false"/>
      <rule_reference ruleName="setter-keyword-clause" optional="true"/>
      <keyword token="}"/>
    </production>
    <production>
      <keyword token="{"/>
      <rule_reference ruleName="setter-keyword-clause" optional="false"/>
      <rule_reference ruleName="getter-keyword-clause" optional="false"/>
      <keyword token="}"/>
    </production>
  </rule>
  <rule name="getter-keyword-clause">
    <production>
      <rule_reference ruleName="attributes" optional="true"/>
      <keyword token="get"/>
    </production>
  </rule>
  <rule name="setter-keyword-clause">
    <production>
      <rule_reference ruleName="attributes" optional="true"/>
      <keyword token="set"/>
    </production>
  </rule>
  <rule name="willSet-didSet-block">
    <production>
      <keyword token="{"/>
      <rule_reference ruleName="willSet-clause" optional="false"/>
      <rule_reference ruleName="didSet-clause" optional="true"/>
      <keyword token="}"/>
    </production>
    <production>
      <keyword token="{"/>
      <rule_reference ruleName="didSet-clause" optional="false"/>
      <rule_reference ruleName="willSet-clause" optional="true"/>
      <keyword token="}"/>
    </production>
  </rule>
  <rule name="willSet-clause">
    <production>
      <rule_reference ruleName="attributes" optional="true"/>
      <keyword token="willSet"/>
      <rule_reference ruleName="setter-name" optional="true"/>
      <rule_reference ruleName="code-block" optional="false"/>
    </production>
  </rule>
  <rule name="didSet-clause">
    <production>
      <rule_reference ruleName="attributes" optional="true"/>
      <keyword token="didSet"/>
      <rule_reference ruleName="setter-name" optional="true"/>
      <rule_reference ruleName="code-block" optional="false"/>
    </production>
  </rule>
  <rule name="typealias-declaration">
    <production>
      <rule_reference ruleName="typealias-head" optional="false"/>
      <rule_reference ruleName="typealias-assignment" optional="false"/>
    </production>
  </rule>
  <rule name="typealias-head">
    <production>
      <rule_reference ruleName="attributes" optional="true"/>
      <rule_reference ruleName="access-level-modifier" optional="true"/>
      <keyword token="typealias"/>
      <rule_reference ruleName="typealias-name" optional="false"/>
    </production>
  </rule>
  <rule name="typealias-name">
    <production>
      <rule_reference ruleName="identifier" optional="false"/>
    </production>
  </rule>
  <rule name="typealias-assignment">
    <production>
      <keyword token="="/>
      <rule_reference ruleName="type" optional="false"/>
    </production>
  </rule>
  <rule name="function-declaration">
    <production>
      <rule_reference ruleName="function-head" optional="false"/>
      <rule_reference ruleName="function-name" optional="false"/>
      <rule_reference ruleName="generic-parameter-clause" optional="true"/>
      <rule_reference ruleName="function-signature" optional="false"/>
      <rule_reference ruleName="function-body" optional="true"/>
    </production>
  </rule>
  <rule name="function-head">
    <production>
      <rule_reference ruleName="attributes" optional="true"/>
      <rule_reference ruleName="declaration-modifiers" optional="true"/>
      <keyword token="func"/>
    </production>
  </rule>
  <rule name="function-name">
    <production>
      <rule_reference ruleName="identifier" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="operator" optional="false"/>
    </production>
  </rule>
  <rule name="function-signature">
    <production>
      <rule_reference ruleName="parameter-clauses" optional="false"/>
      <keyword token="throws"/>
      <rule_reference ruleName="function-result" optional="true"/>
    </production>
    <production>
      <rule_reference ruleName="parameter-clauses" optional="false"/>
      <keyword token="rethrows"/>
      <rule_reference ruleName="function-result" optional="true"/>
    </production>
  </rule>
  <rule name="function-result">
    <production>
      <keyword token="-&gt;"/>
      <rule_reference ruleName="attributes" optional="true"/>
      <rule_reference ruleName="type" optional="false"/>
    </production>
  </rule>
  <rule name="function-body">
    <production>
      <rule_reference ruleName="code-block" optional="false"/>
    </production>
  </rule>
  <rule name="parameter-clauses">
    <production>
      <rule_reference ruleName="parameter-clause" optional="false"/>
      <rule_reference ruleName="parameter-clauses" optional="true"/>
    </production>
  </rule>
  <rule name="parameter-clause">
    <production>
      <keyword token="("/>
      <keyword token=")"/>
    </production>
    <production>
      <keyword token="("/>
      <rule_reference ruleName="parameter-list" optional="false"/>
      <keyword token=")"/>
    </production>
  </rule>
  <rule name="parameter-list">
    <production>
      <rule_reference ruleName="parameter" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="parameter" optional="false"/>
      <keyword token=","/>
      <rule_reference ruleName="parameter-list" optional="false"/>
    </production>
  </rule>
  <rule name="parameter">
    <production>
      <keyword token="let"/>
      <rule_reference ruleName="external-parameter-name" optional="true"/>
      <rule_reference ruleName="local-parameter-name" optional="false"/>
      <rule_reference ruleName="type-annotation" optional="false"/>
      <rule_reference ruleName="default-argument-clause" optional="true"/>
    </production>
    <production>
      <keyword token="var"/>
      <rule_reference ruleName="external-parameter-name" optional="true"/>
      <rule_reference ruleName="local-parameter-name" optional="false"/>
      <rule_reference ruleName="type-annotation" optional="false"/>
      <rule_reference ruleName="default-argument-clause" optional="true"/>
    </production>
    <production>
      <keyword token="inout"/>
      <rule_reference ruleName="external-parameter-name" optional="true"/>
      <rule_reference ruleName="local-parameter-name" optional="false"/>
      <rule_reference ruleName="type-annotation" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="external-parameter-name" optional="true"/>
      <rule_reference ruleName="local-parameter-name" optional="false"/>
      <rule_reference ruleName="type-annotation" optional="false"/>
      <keyword token="..."/>
    </production>
  </rule>
  <rule name="external-parameter-name">
    <production>
      <rule_reference ruleName="identifier" optional="false"/>
    </production>
    <production>
      <keyword token="_"/>
    </production>
  </rule>
  <rule name="local-parameter-name">
    <production>
      <rule_reference ruleName="identifier" optional="false"/>
    </production>
    <production>
      <keyword token="_"/>
    </production>
  </rule>
  <rule name="default-argument-clause">
    <production>
      <keyword token="="/>
      <rule_reference ruleName="expression" optional="false"/>
    </production>
  </rule>
  <rule name="enum-declaration">
    <production>
      <rule_reference ruleName="attributes" optional="true"/>
      <rule_reference ruleName="access-level-modifier" optional="true"/>
      <rule_reference ruleName="union-style-enum" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="attributes" optional="true"/>
      <rule_reference ruleName="access-level-modifier" optional="true"/>
      <rule_reference ruleName="raw-value-style-enum" optional="false"/>
    </production>
  </rule>
  <rule name="union-style-enum">
    <production>
      <keyword token="indirect"/>
      <keyword token="enum"/>
      <rule_reference ruleName="enum-name" optional="false"/>
      <rule_reference ruleName="generic-parameter-clause" optional="true"/>
      <rule_reference ruleName="type-inheritance-clause" optional="true"/>
      <keyword token="{"/>
      <rule_reference ruleName="union-style-enum-members" optional="true"/>
      <keyword token="}"/>
    </production>
  </rule>
  <rule name="union-style-enum-members">
    <production>
      <rule_reference ruleName="union-style-enum-member" optional="false"/>
      <rule_reference ruleName="union-style-enum-members" optional="true"/>
    </production>
  </rule>
  <rule name="union-style-enum-member">
    <production>
      <rule_reference ruleName="declaration" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="union-style-enum-case-clause" optional="false"/>
    </production>
  </rule>
  <rule name="union-style-enum-case-clause">
    <production>
      <rule_reference ruleName="attributes" optional="true"/>
      <keyword token="indirect"/>
      <keyword token="case"/>
      <rule_reference ruleName="union-style-enum-case-list" optional="false"/>
    </production>
  </rule>
  <rule name="union-style-enum-case-list">
    <production>
      <rule_reference ruleName="union-style-enum-case" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="union-style-enum-case" optional="false"/>
      <keyword token=","/>
      <rule_reference ruleName="union-style-enum-case-list" optional="false"/>
    </production>
  </rule>
  <rule name="union-style-enum-case">
    <production>
      <rule_reference ruleName="enum-case-name" optional="false"/>
      <rule_reference ruleName="tuple-type" optional="true"/>
    </production>
  </rule>
  <rule name="enum-name">
    <production>
      <rule_reference ruleName="identifier" optional="false"/>
    </production>
  </rule>
  <rule name="enum-case-name">
    <production>
      <rule_reference ruleName="identifier" optional="false"/>
    </production>
  </rule>
  <rule name="raw-value-style-enum">
    <production>
      <keyword token="enum"/>
      <rule_reference ruleName="enum-name" optional="false"/>
      <rule_reference ruleName="generic-parameter-clause" optional="true"/>
      <rule_reference ruleName="type-inheritance-clause" optional="false"/>
      <keyword token="{"/>
      <rule_reference ruleName="raw-value-style-enum-members" optional="false"/>
      <keyword token="}"/>
    </production>
  </rule>
  <rule name="raw-value-style-enum-members">
    <production>
      <rule_reference ruleName="raw-value-style-enum-member" optional="false"/>
      <rule_reference ruleName="raw-value-style-enum-members" optional="true"/>
    </production>
  </rule>
  <rule name="raw-value-style-enum-member">
    <production>
      <rule_reference ruleName="declaration" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="raw-value-style-enum-case-clause" optional="false"/>
    </production>
  </rule>
  <rule name="raw-value-style-enum-case-clause">
    <production>
      <rule_reference ruleName="attributes" optional="true"/>
      <keyword token="case"/>
      <rule_reference ruleName="raw-value-style-enum-case-list" optional="false"/>
    </production>
  </rule>
  <rule name="raw-value-style-enum-case-list">
    <production>
      <rule_reference ruleName="raw-value-style-enum-case" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="raw-value-style-enum-case" optional="false"/>
      <keyword token=","/>
      <rule_reference ruleName="raw-value-style-enum-case-list" optional="false"/>
    </production>
  </rule>
  <rule name="raw-value-style-enum-case">
    <production>
      <rule_reference ruleName="enum-case-name" optional="false"/>
      <rule_reference ruleName="raw-value-assignment" optional="true"/>
    </production>
  </rule>
  <rule name="raw-value-assignment">
    <production>
      <keyword token="="/>
      <rule_reference ruleName="raw-value-literal" optional="false"/>
    </production>
  </rule>
  <rule name="raw-value-literal">
    <production>
      <rule_reference ruleName="numeric-literal" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="static-string-literal" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="boolean-literal" optional="false"/>
    </production>
  </rule>
  <rule name="struct-declaration">
    <production>
      <rule_reference ruleName="attributes" optional="true"/>
      <rule_reference ruleName="access-level-modifier" optional="true"/>
      <keyword token="struct"/>
      <rule_reference ruleName="struct-name" optional="false"/>
      <rule_reference ruleName="generic-parameter-clause" optional="true"/>
      <rule_reference ruleName="type-inheritance-clause" optional="true"/>
      <rule_reference ruleName="struct-body" optional="false"/>
    </production>
  </rule>
  <rule name="struct-name">
    <production>
      <rule_reference ruleName="identifier" optional="false"/>
    </production>
  </rule>
  <rule name="struct-body">
    <production>
      <keyword token="{"/>
      <rule_reference ruleName="declarations" optional="true"/>
      <keyword token="}"/>
    </production>
  </rule>
  <rule name="class-declaration">
    <production>
      <rule_reference ruleName="attributes" optional="true"/>
      <rule_reference ruleName="access-level-modifier" optional="true"/>
      <keyword token="class"/>
      <rule_reference ruleName="class-name" optional="false"/>
      <rule_reference ruleName="generic-parameter-clause" optional="true"/>
      <rule_reference ruleName="type-inheritance-clause" optional="true"/>
      <rule_reference ruleName="class-body" optional="false"/>
    </production>
  </rule>
  <rule name="class-name">
    <production>
      <rule_reference ruleName="identifier" optional="false"/>
    </production>
  </rule>
  <rule name="class-body">
    <production>
      <keyword token="{"/>
      <rule_reference ruleName="declarations" optional="true"/>
      <keyword token="}"/>
    </production>
  </rule>
  <rule name="protocol-declaration">
    <production>
      <rule_reference ruleName="attributes" optional="true"/>
      <rule_reference ruleName="access-level-modifier" optional="true"/>
      <keyword token="protocol"/>
      <rule_reference ruleName="protocol-name" optional="false"/>
      <rule_reference ruleName="type-inheritance-clause" optional="true"/>
      <rule_reference ruleName="protocol-body" optional="false"/>
    </production>
  </rule>
  <rule name="protocol-name">
    <production>
      <rule_reference ruleName="identifier" optional="false"/>
    </production>
  </rule>
  <rule name="protocol-body">
    <production>
      <keyword token="{"/>
      <rule_reference ruleName="protocol-member-declarations" optional="true"/>
      <keyword token="}"/>
    </production>
  </rule>
  <rule name="protocol-member-declaration">
    <production>
      <rule_reference ruleName="protocol-property-declaration" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="protocol-method-declaration" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="protocol-initializer-declaration" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="protocol-subscript-declaration" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="protocol-associated-type-declaration" optional="false"/>
    </production>
  </rule>
  <rule name="protocol-member-declarations">
    <production>
      <rule_reference ruleName="protocol-member-declaration" optional="false"/>
      <rule_reference ruleName="protocol-member-declarations" optional="true"/>
    </production>
  </rule>
  <rule name="protocol-property-declaration">
    <production>
      <rule_reference ruleName="variable-declaration-head" optional="false"/>
      <rule_reference ruleName="variable-name" optional="false"/>
      <rule_reference ruleName="type-annotation" optional="false"/>
      <rule_reference ruleName="getter-setter-keyword-block" optional="false"/>
    </production>
  </rule>
  <rule name="protocol-method-declaration">
    <production>
      <rule_reference ruleName="function-head" optional="false"/>
      <rule_reference ruleName="function-name" optional="false"/>
      <rule_reference ruleName="generic-parameter-clause" optional="true"/>
      <rule_reference ruleName="function-signature" optional="false"/>
    </production>
  </rule>
  <rule name="protocol-initializer-declaration">
    <production>
      <rule_reference ruleName="initializer-head" optional="false"/>
      <rule_reference ruleName="generic-parameter-clause" optional="true"/>
      <rule_reference ruleName="parameter-clause" optional="false"/>
      <keyword token="throws"/>
    </production>
    <production>
      <rule_reference ruleName="initializer-head" optional="false"/>
      <rule_reference ruleName="generic-parameter-clause" optional="true"/>
      <rule_reference ruleName="parameter-clause" optional="false"/>
      <keyword token="rethrows"/>
    </production>
  </rule>
  <rule name="protocol-subscript-declaration">
    <production>
      <rule_reference ruleName="subscript-head" optional="false"/>
      <rule_reference ruleName="subscript-result" optional="false"/>
      <rule_reference ruleName="getter-setter-keyword-block" optional="false"/>
    </production>
  </rule>
  <rule name="protocol-associated-type-declaration">
    <production>
      <rule_reference ruleName="typealias-head" optional="false"/>
      <rule_reference ruleName="type-inheritance-clause" optional="true"/>
      <rule_reference ruleName="typealias-assignment" optional="true"/>
    </production>
  </rule>
  <rule name="initializer-declaration">
    <production>
      <rule_reference ruleName="initializer-head" optional="false"/>
      <rule_reference ruleName="generic-parameter-clause" optional="true"/>
      <rule_reference ruleName="parameter-clause" optional="false"/>
      <keyword token="throws"/>
      <rule_reference ruleName="initializer-body" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="initializer-head" optional="false"/>
      <rule_reference ruleName="generic-parameter-clause" optional="true"/>
      <rule_reference ruleName="parameter-clause" optional="false"/>
      <keyword token="rethrows"/>
      <rule_reference ruleName="initializer-body" optional="false"/>
    </production>
  </rule>
  <rule name="initializer-head">
    <production>
      <rule_reference ruleName="attributes" optional="true"/>
      <rule_reference ruleName="declaration-modifiers" optional="true"/>
      <keyword token="init"/>
    </production>
    <production>
      <rule_reference ruleName="attributes" optional="true"/>
      <rule_reference ruleName="declaration-modifiers" optional="true"/>
      <keyword token="init"/>
      <keyword token="?"/>
    </production>
    <production>
      <rule_reference ruleName="attributes" optional="true"/>
      <rule_reference ruleName="declaration-modifiers" optional="true"/>
      <keyword token="init"/>
      <keyword token="!"/>
    </production>
  </rule>
  <rule name="initializer-body">
    <production>
      <rule_reference ruleName="code-block" optional="false"/>
    </production>
  </rule>
  <rule name="deinitializer-declaration">
    <production>
      <rule_reference ruleName="attributes" optional="true"/>
      <keyword token="deinit"/>
      <rule_reference ruleName="code-block" optional="false"/>
    </production>
  </rule>
  <rule name="extension-declaration">
    <production>
      <rule_reference ruleName="access-level-modifier" optional="true"/>
      <keyword token="extension"/>
      <rule_reference ruleName="type-identifier" optional="false"/>
      <rule_reference ruleName="type-inheritance-clause" optional="true"/>
      <rule_reference ruleName="extension-body" optional="false"/>
    </production>
  </rule>
  <rule name="extension-body">
    <production>
      <keyword token="{"/>
      <rule_reference ruleName="declarations" optional="true"/>
      <keyword token="}"/>
    </production>
  </rule>
  <rule name="subscript-declaration">
    <production>
      <rule_reference ruleName="subscript-head" optional="false"/>
      <rule_reference ruleName="subscript-result" optional="false"/>
      <rule_reference ruleName="code-block" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="subscript-head" optional="false"/>
      <rule_reference ruleName="subscript-result" optional="false"/>
      <rule_reference ruleName="getter-setter-block" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="subscript-head" optional="false"/>
      <rule_reference ruleName="subscript-result" optional="false"/>
      <rule_reference ruleName="getter-setter-keyword-block" optional="false"/>
    </production>
  </rule>
  <rule name="subscript-head">
    <production>
      <rule_reference ruleName="attributes" optional="true"/>
      <rule_reference ruleName="declaration-modifiers" optional="true"/>
      <keyword token="subscript"/>
      <rule_reference ruleName="parameter-clause" optional="false"/>
    </production>
  </rule>
  <rule name="subscript-result">
    <production>
      <keyword token="-&gt;"/>
      <rule_reference ruleName="attributes" optional="true"/>
      <rule_reference ruleName="type" optional="false"/>
    </production>
  </rule>
  <rule name="operator-declaration">
    <production>
      <rule_reference ruleName="prefix-operator-declaration" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="postfix-operator-declaration" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="infix-operator-declaration" optional="false"/>
    </production>
  </rule>
  <rule name="prefix-operator-declaration">
    <production>
      <keyword token="prefix"/>
      <keyword token="operator"/>
      <rule_reference ruleName="operator" optional="false"/>
      <keyword token="{"/>
      <keyword token="}"/>
    </production>
  </rule>
  <rule name="postfix-operator-declaration">
    <production>
      <keyword token="postfix"/>
      <keyword token="operator"/>
      <rule_reference ruleName="operator" optional="false"/>
      <keyword token="{"/>
      <keyword token="}"/>
    </production>
  </rule>
  <rule name="infix-operator-declaration">
    <production>
      <keyword token="infix"/>
      <keyword token="operator"/>
      <rule_reference ruleName="operator" optional="false"/>
      <keyword token="{"/>
      <rule_reference ruleName="infix-operator-attributes" optional="true"/>
      <keyword token="}"/>
    </production>
  </rule>
  <rule name="infix-operator-attributes">
    <production>
      <rule_reference ruleName="precedence-clause" optional="true"/>
      <rule_reference ruleName="associativity-clause" optional="true"/>
    </production>
  </rule>
  <rule name="precedence-clause">
    <production>
      <keyword token="precedence"/>
      <rule_reference ruleName="precedence-level" optional="false"/>
    </production>
  </rule>
  <rule name="precedence-level">
    <production>
      <literal>
        <range>0..9</range>
      </literal>
    </production>
  </rule>
  <rule name="associativity-clause">
    <production>
      <keyword token="associativity"/>
      <rule_reference ruleName="associativity" optional="false"/>
    </production>
  </rule>
  <rule name="associativity">
    <production>
      <keyword token="left"/>
    </production>
    <production>
      <keyword token="right"/>
    </production>
    <production>
      <keyword token="none"/>
    </production>
  </rule>
  <rule name="declaration-modifier">
    <production>
      <keyword token="class"/>
    </production>
    <production>
      <keyword token="convenience"/>
    </production>
    <production>
      <keyword token="dynamic"/>
    </production>
    <production>
      <keyword token="final"/>
    </production>
    <production>
      <keyword token="infix"/>
    </production>
    <production>
      <keyword token="lazy"/>
    </production>
    <production>
      <keyword token="mutating"/>
    </production>
    <production>
      <keyword token="nonmutating"/>
    </production>
    <production>
      <keyword token="optional"/>
    </production>
    <production>
      <keyword token="override"/>
    </production>
    <production>
      <keyword token="postfix"/>
    </production>
    <production>
      <keyword token="prefix"/>
    </production>
    <production>
      <keyword token="required"/>
    </production>
    <production>
      <keyword token="static"/>
    </production>
    <production>
      <keyword token="unowned"/>
    </production>
    <production>
      <keyword token="unowned"/>
      <keyword token="("/>
      <keyword token="safe"/>
      <keyword token=")"/>
    </production>
    <production>
      <keyword token="unowned"/>
      <keyword token="("/>
      <keyword token="unsafe"/>
      <keyword token=")"/>
    </production>
    <production>
      <keyword token="weak"/>
    </production>
    <production>
      <rule_reference ruleName="access-level-modifier" optional="false"/>
    </production>
  </rule>
  <rule name="declaration-modifiers">
    <production>
      <rule_reference ruleName="declaration-modifier" optional="false"/>
      <rule_reference ruleName="declaration-modifiers" optional="true"/>
    </production>
  </rule>
  <rule name="access-level-modifier">
    <production>
      <keyword token="internal"/>
    </production>
    <production>
      <keyword token="internal"/>
      <keyword token="("/>
      <keyword token="set"/>
      <keyword token=")"/>
    </production>
    <production>
      <keyword token="private"/>
    </production>
    <production>
      <keyword token="private"/>
      <keyword token="("/>
      <keyword token="set"/>
      <keyword token=")"/>
    </production>
    <production>
      <keyword token="public"/>
    </production>
    <production>
      <keyword token="public"/>
      <keyword token="("/>
      <keyword token="set"/>
      <keyword token=")"/>
    </production>
  </rule>
  <rule name="pattern">
    <production>
      <rule_reference ruleName="wildcard-pattern" optional="false"/>
      <rule_reference ruleName="type-annotation" optional="true"/>
    </production>
    <production>
      <rule_reference ruleName="identifier-pattern" optional="false"/>
      <rule_reference ruleName="type-annotation" optional="true"/>
    </production>
    <production>
      <rule_reference ruleName="value-binding-pattern" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="tuple-pattern" optional="false"/>
      <rule_reference ruleName="type-annotation" optional="true"/>
    </production>
    <production>
      <rule_reference ruleName="enum-case-pattern" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="optional-pattern" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="type-casting-pattern" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="expression-pattern" optional="false"/>
    </production>
  </rule>
  <rule name="wildcard-pattern">
    <production>
      <keyword token="_"/>
    </production>
  </rule>
  <rule name="identifier-pattern">
    <production>
      <rule_reference ruleName="identifier" optional="false"/>
    </production>
  </rule>
  <rule name="value-binding-pattern">
    <production>
      <keyword token="var"/>
      <rule_reference ruleName="pattern" optional="false"/>
    </production>
    <production>
      <keyword token="let"/>
      <rule_reference ruleName="pattern" optional="false"/>
    </production>
  </rule>
  <rule name="tuple-pattern">
    <production>
      <keyword token="("/>
      <rule_reference ruleName="tuple-pattern-element-list" optional="true"/>
      <keyword token=")"/>
    </production>
  </rule>
  <rule name="tuple-pattern-element-list">
    <production>
      <rule_reference ruleName="tuple-pattern-element" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="tuple-pattern-element" optional="false"/>
      <keyword token=","/>
      <rule_reference ruleName="tuple-pattern-element-list" optional="false"/>
    </production>
  </rule>
  <rule name="tuple-pattern-element">
    <production>
      <rule_reference ruleName="pattern" optional="false"/>
    </production>
  </rule>
  <rule name="enum-case-pattern">
    <production>
      <rule_reference ruleName="type-identifier" optional="true"/>
      <keyword token="."/>
      <rule_reference ruleName="enum-case-name" optional="false"/>
      <rule_reference ruleName="tuple-pattern" optional="true"/>
    </production>
  </rule>
  <rule name="optional-pattern">
    <production>
      <rule_reference ruleName="identifier-pattern" optional="false"/>
      <keyword token="?"/>
    </production>
  </rule>
  <rule name="type-casting-pattern">
    <production>
      <rule_reference ruleName="is-pattern" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="as-pattern" optional="false"/>
    </production>
  </rule>
  <rule name="is-pattern">
    <production>
      <keyword token="is"/>
      <rule_reference ruleName="type" optional="false"/>
    </production>
  </rule>
  <rule name="as-pattern">
    <production>
      <rule_reference ruleName="pattern" optional="false"/>
      <keyword token="as"/>
      <rule_reference ruleName="type" optional="false"/>
    </production>
  </rule>
  <rule name="expression-pattern">
    <production>
      <rule_reference ruleName="expression" optional="false"/>
    </production>
  </rule>
  <rule name="attribute">
    <production>
      <keyword token="@"/>
      <rule_reference ruleName="attribute-name" optional="false"/>
      <rule_reference ruleName="attribute-argument-clause" optional="true"/>
    </production>
  </rule>
  <rule name="attribute-name">
    <production>
      <rule_reference ruleName="identifier" optional="false"/>
    </production>
  </rule>
  <rule name="attribute-argument-clause">
    <production>
      <keyword token="("/>
      <rule_reference ruleName="balanced-tokens" optional="true"/>
      <keyword token=")"/>
    </production>
  </rule>
  <rule name="attributes">
    <production>
      <rule_reference ruleName="attribute" optional="false"/>
      <rule_reference ruleName="attributes" optional="true"/>
    </production>
  </rule>
  <rule name="balanced-tokens">
    <production>
      <rule_reference ruleName="balanced-token" optional="false"/>
      <rule_reference ruleName="balanced-tokens" optional="true"/>
    </production>
  </rule>
  <rule name="balanced-token">
    <production>
      <keyword token="("/>
      <rule_reference ruleName="balanced-tokens" optional="true"/>
      <keyword token=")"/>
    </production>
    <production>
      <keyword token="["/>
      <rule_reference ruleName="balanced-tokens" optional="true"/>
      <keyword token="]"/>
    </production>
    <production>
      <keyword token="{"/>
      <rule_reference ruleName="balanced-tokens" optional="true"/>
      <keyword token="}"/>
    </production>
    <production>
      <literal>
        <range>A..Z</range>
        <range>a..z</range>
        <range>0..9</range>
      </literal>
    </production>
    <production>
      <literal>
        <character>*</character>
        <character>=</character>
        <character>+</character>
        <character>-</character>
        <character>/</character>
        <character>_</character>
      </literal>
    </production>
  </rule>
  <rule name="expression">
    <production>
      <rule_reference ruleName="try-operator" optional="true"/>
      <rule_reference ruleName="prefix-expression" optional="false"/>
      <rule_reference ruleName="binary-expressions" optional="true"/>
    </production>
  </rule>
  <rule name="expression-list">
    <production>
      <rule_reference ruleName="expression" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="expression" optional="false"/>
      <keyword token=","/>
      <rule_reference ruleName="expression-list" optional="false"/>
    </production>
  </rule>
  <rule name="prefix-expression">
    <production>
      <rule_reference ruleName="prefix-operator" optional="true"/>
      <rule_reference ruleName="postfix-expression" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="in-out-expression" optional="false"/>
    </production>
  </rule>
  <rule name="in-out-expression">
    <production>
      <keyword token="&amp;"/>
      <rule_reference ruleName="identifier" optional="false"/>
    </production>
  </rule>
  <rule name="try-operator">
    <production>
      <keyword token="try"/>
    </production>
    <production>
      <keyword token="try"/>
      <keyword token="?"/>
    </production>
    <production>
      <keyword token="try"/>
      <keyword token="!"/>
    </production>
  </rule>
  <rule name="binary-expression">
    <production>
      <rule_reference ruleName="binary-operator" optional="false"/>
      <rule_reference ruleName="prefix-expression" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="assignment-operator" optional="false"/>
      <rule_reference ruleName="try-operator" optional="true"/>
      <rule_reference ruleName="prefix-expression" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="conditional-operator" optional="false"/>
      <rule_reference ruleName="try-operator" optional="true"/>
      <rule_reference ruleName="prefix-expression" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="type-casting-operator" optional="false"/>
    </production>
  </rule>
  <rule name="binary-expressions">
    <production>
      <rule_reference ruleName="binary-expression" optional="false"/>
      <rule_reference ruleName="binary-expressions" optional="true"/>
    </production>
  </rule>
  <rule name="assignment-operator">
    <production>
      <keyword token="="/>
    </production>
  </rule>
  <rule name="conditional-operator">
    <production>
      <keyword token="?"/>
      <rule_reference ruleName="try-operator" optional="true"/>
      <rule_reference ruleName="expression" optional="false"/>
      <keyword token=":"/>
    </production>
  </rule>
  <rule name="type-casting-operator">
    <production>
      <keyword token="is"/>
      <rule_reference ruleName="type" optional="false"/>
    </production>
    <production>
      <keyword token="as"/>
      <rule_reference ruleName="type" optional="false"/>
    </production>
    <production>
      <keyword token="as"/>
      <keyword token="?"/>
      <rule_reference ruleName="type" optional="false"/>
    </production>
    <production>
      <keyword token="as"/>
      <keyword token="!"/>
      <rule_reference ruleName="type" optional="false"/>
    </production>
  </rule>
  <rule name="primary-expression">
    <production>
      <rule_reference ruleName="identifier" optional="false"/>
      <rule_reference ruleName="generic-argument-clause" optional="true"/>
    </production>
    <production>
      <rule_reference ruleName="literal-expression" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="self-expression" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="superclass-expression" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="closure-expression" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="parenthesized-expression" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="implicit-member-expression" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="wildcard-expression" optional="false"/>
    </production>
  </rule>
  <rule name="literal-expression">
    <production>
      <rule_reference ruleName="literal" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="array-literal" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="dictionary-literal" optional="false"/>
    </production>
    <production>
      <keyword token="__FILE__"/>
    </production>
    <production>
      <keyword token="__LINE__"/>
    </production>
    <production>
      <keyword token="__COLUMN__"/>
    </production>
    <production>
      <keyword token="__FUNCTION__"/>
    </production>
  </rule>
  <rule name="array-literal">
    <production>
      <keyword token="["/>
      <rule_reference ruleName="array-literal-items" optional="true"/>
      <keyword token="]"/>
    </production>
  </rule>
  <rule name="array-literal-items">
    <production>
      <rule_reference ruleName="array-literal-item" optional="false"/>
      <keyword token=","/>
    </production>
    <production>
      <rule_reference ruleName="array-literal-item" optional="false"/>
      <keyword token=","/>
      <rule_reference ruleName="array-literal-items" optional="false"/>
    </production>
  </rule>
  <rule name="array-literal-item">
    <production>
      <rule_reference ruleName="expression" optional="false"/>
    </production>
  </rule>
  <rule name="dictionary-literal">
    <production>
      <keyword token="["/>
      <rule_reference ruleName="dictionary-literal-items" optional="false"/>
      <keyword token="]"/>
    </production>
    <production>
      <keyword token="["/>
      <keyword token=":"/>
      <keyword token="]"/>
    </production>
  </rule>
  <rule name="dictionary-literal-items">
    <production>
      <rule_reference ruleName="dictionary-literal-item" optional="false"/>
      <keyword token=","/>
    </production>
    <production>
      <rule_reference ruleName="dictionary-literal-item" optional="false"/>
      <keyword token=","/>
      <rule_reference ruleName="dictionary-literal-items" optional="false"/>
    </production>
  </rule>
  <rule name="dictionary-literal-item">
    <production>
      <rule_reference ruleName="expression" optional="false"/>
      <keyword token=":"/>
      <rule_reference ruleName="expression" optional="false"/>
    </production>
  </rule>
  <rule name="self-expression">
    <production>
      <keyword token="self"/>
    </production>
    <production>
      <keyword token="self"/>
      <keyword token="."/>
      <rule_reference ruleName="identifier" optional="false"/>
    </production>
    <production>
      <keyword token="self"/>
      <keyword token="["/>
      <rule_reference ruleName="expression-list" optional="false"/>
      <keyword token="]"/>
    </production>
    <production>
      <keyword token="self"/>
      <keyword token="."/>
      <keyword token="init"/>
    </production>
  </rule>
  <rule name="superclass-expression">
    <production>
      <rule_reference ruleName="superclass-method-expression" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="superclass-subscript-expression" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="superclass-initializer-expression" optional="false"/>
    </production>
  </rule>
  <rule name="superclass-method-expression">
    <production>
      <keyword token="super"/>
      <keyword token="."/>
      <rule_reference ruleName="identifier" optional="false"/>
    </production>
  </rule>
  <rule name="superclass-subscript-expression">
    <production>
      <keyword token="super"/>
      <keyword token="["/>
      <rule_reference ruleName="expression-list" optional="false"/>
      <keyword token="]"/>
    </production>
  </rule>
  <rule name="superclass-initializer-expression">
    <production>
      <keyword token="super"/>
      <keyword token="."/>
      <keyword token="init"/>
    </production>
  </rule>
  <rule name="closure-expression">
    <production>
      <keyword token="{"/>
      <rule_reference ruleName="closure-signature" optional="true"/>
      <rule_reference ruleName="statements" optional="false"/>
      <keyword token="}"/>
    </production>
  </rule>
  <rule name="closure-signature">
    <production>
      <rule_reference ruleName="parameter-clause" optional="false"/>
      <rule_reference ruleName="function-result" optional="true"/>
      <keyword token="in"/>
    </production>
    <production>
      <rule_reference ruleName="identifier-list" optional="false"/>
      <rule_reference ruleName="function-result" optional="true"/>
      <keyword token="in"/>
    </production>
    <production>
      <rule_reference ruleName="capture-list" optional="false"/>
      <rule_reference ruleName="parameter-clause" optional="false"/>
      <rule_reference ruleName="function-result" optional="true"/>
      <keyword token="in"/>
    </production>
    <production>
      <rule_reference ruleName="capture-list" optional="false"/>
      <rule_reference ruleName="identifier-list" optional="false"/>
      <rule_reference ruleName="function-result" optional="true"/>
      <keyword token="in"/>
    </production>
    <production>
      <rule_reference ruleName="capture-list" optional="false"/>
      <keyword token="in"/>
    </production>
  </rule>
  <rule name="capture-list">
    <production>
      <keyword token="["/>
      <rule_reference ruleName="capture-list-items" optional="false"/>
      <keyword token="]"/>
    </production>
  </rule>
  <rule name="capture-list-items">
    <production>
      <rule_reference ruleName="capture-list-item" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="capture-list-item" optional="false"/>
      <keyword token=","/>
      <rule_reference ruleName="capture-list-items" optional="false"/>
    </production>
  </rule>
  <rule name="capture-list-item">
    <production>
      <rule_reference ruleName="capture-specifier" optional="true"/>
      <rule_reference ruleName="expression" optional="false"/>
    </production>
  </rule>
  <rule name="capture-specifier">
    <production>
      <keyword token="weak"/>
    </production>
    <production>
      <keyword token="unowned"/>
    </production>
    <production>
      <keyword token="unowned(safe)"/>
    </production>
    <production>
      <keyword token="unowned(unsafe)"/>
    </production>
  </rule>
  <rule name="implicit-member-expression">
    <production>
      <keyword token="."/>
      <rule_reference ruleName="identifier" optional="false"/>
    </production>
  </rule>
  <rule name="parenthesized-expression">
    <production>
      <keyword token="("/>
      <rule_reference ruleName="expression-element-list" optional="true"/>
      <keyword token=")"/>
    </production>
  </rule>
  <rule name="expression-element-list">
    <production>
      <rule_reference ruleName="expression-element" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="expression-element" optional="false"/>
      <keyword token=","/>
      <rule_reference ruleName="expression-element-list" optional="false"/>
    </production>
  </rule>
  <rule name="expression-element">
    <production>
      <rule_reference ruleName="expression" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="identifier" optional="false"/>
      <keyword token=":"/>
      <rule_reference ruleName="expression" optional="false"/>
    </production>
  </rule>
  <rule name="wildcard-expression">
    <production>
      <keyword token="_"/>
    </production>
  </rule>
  <rule name="postfix-expression">
    <production>
      <rule_reference ruleName="primary-expression" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="postfix-expression" optional="false"/>
      <rule_reference ruleName="postfix-operator" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="function-call-expression" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="initializer-expression" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="explicit-member-expression" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="postfix-self-expression" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="dynamic-type-expression" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="subscript-expression" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="forced-value-expression" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="optional-chaining-expression" optional="false"/>
    </production>
  </rule>
  <rule name="function-call-expression">
    <production>
      <rule_reference ruleName="postfix-expression" optional="false"/>
      <rule_reference ruleName="parenthesized-expression" optional="false"/>
      <rule_reference ruleName="trailing-closure" optional="true"/>
    </production>
  </rule>
  <rule name="trailing-closure">
    <production>
      <rule_reference ruleName="closure-expression" optional="false"/>
    </production>
  </rule>
  <rule name="initializer-expression">
    <production>
      <rule_reference ruleName="postfix-expression" optional="false"/>
      <keyword token="."/>
      <keyword token="init"/>
    </production>
  </rule>
  <rule name="explicit-member-expression">
    <production>
      <rule_reference ruleName="postfix-expression" optional="false"/>
      <keyword token="."/>
      <rule_reference ruleName="decimal-digits" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="postfix-expression" optional="false"/>
      <keyword token="."/>
      <rule_reference ruleName="identifier" optional="false"/>
      <rule_reference ruleName="generic-argument-clause" optional="true"/>
    </production>
  </rule>
  <rule name="postfix-self-expression">
    <production>
      <rule_reference ruleName="postfix-expression" optional="false"/>
      <keyword token="."/>
      <keyword token="self"/>
    </production>
  </rule>
  <rule name="dynamic-type-expression">
    <production>
      <rule_reference ruleName="postfix-expression" optional="false"/>
      <keyword token="."/>
      <keyword token="dynamicType"/>
    </production>
  </rule>
  <rule name="subscript-expression">
    <production>
      <rule_reference ruleName="postfix-expression" optional="false"/>
      <keyword token="["/>
      <rule_reference ruleName="expression-list" optional="false"/>
      <keyword token="]"/>
    </production>
  </rule>
  <rule name="forced-value-expression">
    <production>
      <rule_reference ruleName="postfix-expression" optional="false"/>
      <keyword token="!"/>
    </production>
  </rule>
  <rule name="optional-chaining-expression">
    <production>
      <rule_reference ruleName="postfix-expression" optional="false"/>
      <keyword token="?"/>
    </production>
  </rule>
  <rule name="identifier">
    <production>
      <rule_reference ruleName="identifier-head" optional="false"/>
      <rule_reference ruleName="identifier-characters" optional="true"/>
    </production>
    <production>
      <keyword token="`"/>
      <rule_reference ruleName="identifier-head" optional="false"/>
      <rule_reference ruleName="identifier-characters" optional="true"/>
      <keyword token="`"/>
    </production>
    <production>
      <rule_reference ruleName="implicit-parameter-name" optional="false"/>
    </production>
  </rule>
  <rule name="identifier-list">
    <production>
      <rule_reference ruleName="identifier" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="identifier" optional="false"/>
      <keyword token=","/>
      <rule_reference ruleName="identifier-list" optional="false"/>
    </production>
  </rule>
  <rule name="identifier-head">
    <production>
      <literal>
        <range>A..Z</range>
        <range>a..z</range>
      </literal>
    </production>
    <production>
      <keyword token="_"/>
    </production>
    <production>
      <literal>
        <character>U+00A8</character>
        <character>U+00AA</character>
        <character>U+00AF</character>
        <range>U+00B2..U+00B5</range>
        <range>U+00B7..U+00BA</range>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+00BC..U+00BE</range>
        <range>U+00D8..U+00F6</range>
        <range>U+00F8..U+00FF</range>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+0100..U+02FF</range>
        <range>U+0370..U+167F</range>
        <range>U+1681..U+180D</range>
        <range>U+180F..U+1DBF</range>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+1E00..U+1FFF</range>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+200B..U+200D</range>
        <range>U+202A..U+202E</range>
        <range>U+203F..U+2040</range>
        <character>U+2054</character>
        <range>U+2060..U+206F</range>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+2070..U+20CF</range>
        <range>U+2100..U+218F</range>
        <range>U+2460..U+24FF</range>
        <range>U+2776..U+2793</range>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+2C00..U+2DFF</range>
        <range>U+2E80..U+2FFF</range>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+3004..U+3007</range>
        <range>U+3021..U+302F</range>
        <range>U+3031..U+303F</range>
        <range>U+3040..U+D7FF</range>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+F900..U+FD3D</range>
        <range>U+FD40..U+FDCF</range>
        <range>U+FDF0..U+FE1F</range>
        <range>U+FE30..U+FE44</range>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+FE47..U+FFFD</range>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+10000..U+1FFFD</range>
        <range>U+20000..U+2FFFD</range>
        <range>U+30000..U+3FFFD</range>
        <range>U+40000..U+4FFFD</range>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+50000..U+5FFFD</range>
        <range>U+60000..U+6FFFD</range>
        <range>U+70000..U+7FFFD</range>
        <range>U+80000..U+8FFFD</range>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+90000..U+9FFFD</range>
        <range>U+A0000..U+AFFFD</range>
        <range>U+B0000..U+BFFFD</range>
        <range>U+C0000..U+CFFFD</range>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+D0000..U+DFFFD</range>
        <range>U+E0000..U+EFFFD</range>
      </literal>
    </production>
  </rule>
  <rule name="identifier-character">
    <production>
      <literal>
        <range>0..9</range>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+0300..U+036F</range>
        <range>U+1DC0..U+1DFF</range>
        <range>U+20D0..U+20FF</range>
        <range>U+FE20..U+FE2F</range>
      </literal>
    </production>
    <production>
      <rule_reference ruleName="identifier-head" optional="false"/>
    </production>
  </rule>
  <rule name="identifier-characters">
    <production>
      <rule_reference ruleName="identifier-character" optional="false"/>
      <rule_reference ruleName="identifier-characters" optional="true"/>
    </production>
  </rule>
  <rule name="implicit-parameter-name">
    <production>
      <keyword token="$"/>
      <rule_reference ruleName="decimal-digits" optional="false"/>
    </production>
  </rule>
  <rule name="literal">
    <production>
      <rule_reference ruleName="numeric-literal" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="string-literal" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="boolean-literal" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="nil-literal" optional="false"/>
    </production>
  </rule>
  <rule name="numeric-literal">
    <production>
      <keyword token="-"/>
      <rule_reference ruleName="integer-literal" optional="false"/>
    </production>
    <production>
      <keyword token="-"/>
      <rule_reference ruleName="floating-point-literal" optional="false"/>
    </production>
  </rule>
  <rule name="boolean-literal">
    <production>
      <keyword token="true"/>
    </production>
    <production>
      <keyword token="false"/>
    </production>
  </rule>
  <rule name="nil-literal">
    <production>
      <keyword token="nil"/>
    </production>
  </rule>
  <rule name="integer-literal">
    <production>
      <rule_reference ruleName="binary-literal" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="octal-literal" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="decimal-literal" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="hexadecimal-literal" optional="false"/>
    </production>
  </rule>
  <rule name="binary-literal">
    <production>
      <keyword token="0b"/>
      <rule_reference ruleName="binary-digit" optional="false"/>
      <rule_reference ruleName="binary-literal-characters" optional="true"/>
    </production>
  </rule>
  <rule name="binary-digit">
    <production>
      <literal>
        <character>0</character>
        <character>1</character>
      </literal>
    </production>
  </rule>
  <rule name="binary-literal-character">
    <production>
      <rule_reference ruleName="binary-digit" optional="false"/>
    </production>
    <production>
      <keyword token="_"/>
    </production>
  </rule>
  <rule name="binary-literal-characters">
    <production>
      <rule_reference ruleName="binary-literal-character" optional="false"/>
      <rule_reference ruleName="binary-literal-characters" optional="true"/>
    </production>
  </rule>
  <rule name="octal-literal">
    <production>
      <keyword token="0o"/>
      <rule_reference ruleName="octal-digit" optional="false"/>
      <rule_reference ruleName="octal-literal-characters" optional="true"/>
    </production>
  </rule>
  <rule name="octal-digit">
    <production>
      <literal>
        <range>0..7</range>
      </literal>
    </production>
  </rule>
  <rule name="octal-literal-character">
    <production>
      <rule_reference ruleName="octal-digit" optional="false"/>
    </production>
    <production>
      <keyword token="_"/>
    </production>
  </rule>
  <rule name="octal-literal-characters">
    <production>
      <rule_reference ruleName="octal-literal-character" optional="false"/>
      <rule_reference ruleName="octal-literal-characters" optional="true"/>
    </production>
  </rule>
  <rule name="decimal-literal">
    <production>
      <rule_reference ruleName="decimal-digit" optional="false"/>
      <rule_reference ruleName="decimal-literal-characters" optional="true"/>
    </production>
  </rule>
  <rule name="decimal-digit">
    <production>
      <literal>
        <range>0..9</range>
      </literal>
    </production>
  </rule>
  <rule name="decimal-digits">
    <production>
      <rule_reference ruleName="decimal-digit" optional="false"/>
      <rule_reference ruleName="decimal-digits" optional="true"/>
    </production>
  </rule>
  <rule name="decimal-literal-character">
    <production>
      <rule_reference ruleName="decimal-digit" optional="false"/>
    </production>
    <production>
      <keyword token="_"/>
    </production>
  </rule>
  <rule name="decimal-literal-characters">
    <production>
      <rule_reference ruleName="decimal-literal-character" optional="false"/>
      <rule_reference ruleName="decimal-literal-characters" optional="true"/>
    </production>
  </rule>
  <rule name="hexadecimal-literal">
    <production>
      <keyword token="0x"/>
      <rule_reference ruleName="hexadecimal-digit" optional="false"/>
      <rule_reference ruleName="hexadecimal-literal-characters" optional="true"/>
    </production>
  </rule>
  <rule name="hexadecimal-digit">
    <production>
      <literal>
        <range>0..9</range>
        <range>a..f</range>
        <range>A..F</range>
      </literal>
    </production>
  </rule>
  <rule name="hexadecimal-literal-character">
    <production>
      <rule_reference ruleName="hexadecimal-digit" optional="false"/>
    </production>
    <production>
      <keyword token="_"/>
    </production>
  </rule>
  <rule name="hexadecimal-literal-characters">
    <production>
      <rule_reference ruleName="hexadecimal-literal-character" optional="false"/>
      <rule_reference ruleName="hexadecimal-literal-characters" optional="true"/>
    </production>
  </rule>
  <rule name="floating-point-literal">
    <production>
      <rule_reference ruleName="decimal-literal" optional="false"/>
      <rule_reference ruleName="decimal-fraction" optional="true"/>
      <rule_reference ruleName="decimal-exponent" optional="true"/>
    </production>
    <production>
      <rule_reference ruleName="hexadecimal-literal" optional="false"/>
      <rule_reference ruleName="hexadecimal-fraction" optional="true"/>
      <rule_reference ruleName="hexadecimal-exponent" optional="false"/>
    </production>
  </rule>
  <rule name="decimal-fraction">
    <production>
      <keyword token="."/>
      <rule_reference ruleName="decimal-literal" optional="false"/>
    </production>
  </rule>
  <rule name="decimal-exponent">
    <production>
      <rule_reference ruleName="floating-point-e" optional="false"/>
      <rule_reference ruleName="sign" optional="true"/>
      <rule_reference ruleName="decimal-literal" optional="false"/>
    </production>
  </rule>
  <rule name="hexadecimal-fraction">
    <production>
      <keyword token="."/>
      <rule_reference ruleName="hexadecimal-digit" optional="false"/>
      <rule_reference ruleName="hexadecimal-literal-characters" optional="true"/>
    </production>
  </rule>
  <rule name="hexadecimal-exponent">
    <production>
      <rule_reference ruleName="floating-point-p" optional="false"/>
      <rule_reference ruleName="sign" optional="true"/>
      <rule_reference ruleName="decimal-literal" optional="false"/>
    </production>
  </rule>
  <rule name="floating-point-e">
    <production>
      <keyword token="e"/>
    </production>
    <production>
      <keyword token="E"/>
    </production>
  </rule>
  <rule name="floating-point-p">
    <production>
      <keyword token="p"/>
    </production>
    <production>
      <keyword token="P"/>
    </production>
  </rule>
  <rule name="sign">
    <production>
      <keyword token="+"/>
    </production>
    <production>
      <keyword token="-"/>
    </production>
  </rule>
  <rule name="string-literal">
    <production>
      <rule_reference ruleName="static-string-literal" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="interpolated-string-literal" optional="false"/>
    </production>
  </rule>
  <rule name="static-string-literal">
    <production>
      <keyword token="\&quot;"/>
      <rule_reference ruleName="quoted-text" optional="true"/>
      <keyword token="\&quot;"/>
    </production>
  </rule>
  <rule name="quoted-text">
    <production>
      <rule_reference ruleName="quoted-text-item" optional="false"/>
      <rule_reference ruleName="quoted-text" optional="true"/>
    </production>
  </rule>
  <rule name="quoted-text-item">
    <production>
      <rule_reference ruleName="escaped-character" optional="false"/>
    </production>
    <production>
      <literal>
        <not>
          <character>"</character>
          <character>\</character>
          <character>U+000A</character>
          <character>U+000D</character>
        </not>
      </literal>
    </production>
  </rule>
  <rule name="interpolated-string-literal">
    <production>
      <keyword token="\&quot;"/>
      <rule_reference ruleName="interpolated-text" optional="true"/>
      <keyword token="\&quot;"/>
    </production>
  </rule>
  <rule name="interpolated-text">
    <production>
      <rule_reference ruleName="interpolated-text-item" optional="false"/>
      <rule_reference ruleName="interpolated-text" optional="true"/>
    </production>
  </rule>
  <rule name="interpolated-text-item">
    <production>
      <keyword token="\\("/>
      <rule_reference ruleName="quoted-text-item" optional="true"/>
      <rule_reference ruleName="expression" optional="false"/>
      <rule_reference ruleName="quoted-text-item" optional="true"/>
      <keyword token=")"/>
    </production>
  </rule>
  <rule name="escaped-character">
    <production>
      <keyword token="\\0"/>
    </production>
    <production>
      <keyword token="\\\\"/>
    </production>
    <production>
      <keyword token="\\t"/>
    </production>
    <production>
      <keyword token="\\n"/>
    </production>
    <production>
      <keyword token="\\r"/>
    </production>
    <production>
      <keyword token="\\\&quot;"/>
    </production>
    <production>
      <keyword token="\\'"/>
    </production>
    <production>
      <keyword token="\\u"/>
      <keyword token="{"/>
      <rule_reference ruleName="unicode-scalar-digits" optional="false"/>
      <keyword token="}"/>
    </production>
  </rule>
  <rule name="unicode-scalar-digits">
    <production>
      <literal>
        <range>0..9</range>
        <range>a..f</range>
        <range>A..F</range>
      </literal>
    </production>
  </rule>
  <rule name="operator">
    <production>
      <rule_reference ruleName="operator-head" optional="false"/>
      <rule_reference ruleName="operator-characters" optional="true"/>
    </production>
    <production>
      <rule_reference ruleName="dot-operator-head" optional="false"/>
      <rule_reference ruleName="dot-operator-characters" optional="true"/>
    </production>
  </rule>
  <rule name="operator-head">
    <production>
      <keyword token="/"/>
    </production>
    <production>
      <keyword token="="/>
    </production>
    <production>
      <keyword token="-"/>
    </production>
    <production>
      <keyword token="+"/>
    </production>
    <production>
      <keyword token="!"/>
    </production>
    <production>
      <keyword token="*"/>
    </production>
    <production>
      <keyword token="%"/>
    </production>
    <production>
      <keyword token="&lt;"/>
    </production>
    <production>
      <keyword token="&gt;"/>
    </production>
    <production>
      <keyword token="&amp;"/>
    </production>
    <production>
      <keyword token="|"/>
    </production>
    <production>
      <keyword token="^"/>
    </production>
    <production>
      <keyword token="~"/>
    </production>
    <production>
      <keyword token="?"/>
    </production>
    <production>
      <literal>
        <range>U+00A1..U+00A7</range>
      </literal>
    </production>
    <production>
      <literal>
        <character>U+00A9</character>
        <character>U+00AB</character>
      </literal>
    </production>
    <production>
      <literal>
        <character>U+00AC</character>
        <character>U+00AE</character>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+00B0..U+00B1</range>
        <character>U+00BB</character>
        <character>U+00BF</character>
        <character>U+00D7</character>
        <character>U+00F7</character>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+2016..U+2017</range>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+2030..U+203E</range>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+2041..U+2053</range>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+2055..U+205E</range>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+2190..U+23FF</range>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+2500..U+2775</range>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+2794..U+2BFF</range>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+2E00..U+2E7F</range>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+3001..U+3003</range>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+3008..U+3030</range>
      </literal>
    </production>
  </rule>
  <rule name="operator-character">
    <production>
      <rule_reference ruleName="operator-head" optional="false"/>
    </production>
    <production>
      <literal>
        <range>U+0300..U+036F</range>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+1DC0..U+1DFF</range>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+20D0..U+20FF</range>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+FE00..U+FE0F</range>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+FE20..U+FE2F</range>
      </literal>
    </production>
    <production>
      <literal>
        <range>U+E0100..U+E01EF</range>
      </literal>
    </production>
  </rule>
  <rule name="operator-characters">
    <production>
      <rule_reference ruleName="operator-character" optional="false"/>
      <rule_reference ruleName="operator-characters" optional="true"/>
    </production>
  </rule>
  <rule name="dot-operator-head">
    <production>
      <keyword token=".."/>
    </production>
  </rule>
  <rule name="dot-operator-character">
    <production>
      <keyword token="."/>
    </production>
    <production>
      <rule_reference ruleName="operator-character" optional="false"/>
    </production>
  </rule>
  <rule name="dot-operator-characters">
    <production>
      <rule_reference ruleName="dot-operator-character" optional="false"/>
      <rule_reference ruleName="dot-operator-characters" optional="true"/>
    </production>
  </rule>
  <rule name="binary-operator">
    <production>
      <rule_reference ruleName="operator" optional="false"/>
    </production>
  </rule>
  <rule name="prefix-operator">
    <production>
      <rule_reference ruleName="operator" optional="false"/>
    </production>
  </rule>
  <rule name="postfix-operator">
    <production>
      <rule_reference ruleName="operator" optional="false"/>
    </production>
  </rule>
  <rule name="type">
    <production>
      <rule_reference ruleName="array-type" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="dictionary-type" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="function-type" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="type-identifier" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="tuple-type" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="optional-type" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="implicitly-unwrapped-optional-type" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="protocol-composition-type" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="metatype-type" optional="false"/>
    </production>
  </rule>
  <rule name="type-annotation">
    <production>
      <keyword token=":"/>
      <rule_reference ruleName="attributes" optional="true"/>
      <rule_reference ruleName="type" optional="false"/>
    </production>
  </rule>
  <rule name="type-identifier">
    <production>
      <rule_reference ruleName="type-name" optional="false"/>
      <rule_reference ruleName="generic-argument-clause" optional="true"/>
    </production>
    <production>
      <rule_reference ruleName="type-name" optional="false"/>
      <rule_reference ruleName="generic-argument-clause" optional="true"/>
      <keyword token="."/>
      <rule_reference ruleName="type-identifier" optional="false"/>
    </production>
  </rule>
  <rule name="type-name">
    <production>
      <rule_reference ruleName="identifier" optional="false"/>
    </production>
  </rule>
  <rule name="tuple-type">
    <production>
      <keyword token="("/>
      <rule_reference ruleName="tuple-type-body" optional="true"/>
      <keyword token=")"/>
    </production>
  </rule>
  <rule name="tuple-type-body">
    <production>
      <rule_reference ruleName="tuple-type-element-list" optional="false"/>
      <keyword token="..."/>
    </production>
  </rule>
  <rule name="tuple-type-element-list">
    <production>
      <rule_reference ruleName="tuple-type-element" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="tuple-type-element" optional="false"/>
      <keyword token=","/>
      <rule_reference ruleName="tuple-type-element-list" optional="false"/>
    </production>
  </rule>
  <rule name="tuple-type-element">
    <production>
      <rule_reference ruleName="attributes" optional="true"/>
      <keyword token="inout"/>
      <rule_reference ruleName="type" optional="false"/>
    </production>
    <production>
      <keyword token="inout"/>
      <rule_reference ruleName="element-name" optional="false"/>
      <rule_reference ruleName="type-annotation" optional="false"/>
    </production>
  </rule>
  <rule name="element-name">
    <production>
      <rule_reference ruleName="identifier" optional="false"/>
    </production>
  </rule>
  <rule name="function-type">
    <production>
      <rule_reference ruleName="type" optional="false"/>
      <keyword token="throws"/>
      <keyword token="-&gt;"/>
      <rule_reference ruleName="type" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="type" optional="false"/>
      <keyword token="rethrows"/>
      <keyword token="-&gt;"/>
      <rule_reference ruleName="type" optional="false"/>
    </production>
  </rule>
  <rule name="array-type">
    <production>
      <keyword token="["/>
      <rule_reference ruleName="type" optional="false"/>
      <keyword token="]"/>
    </production>
  </rule>
  <rule name="dictionary-type">
    <production>
      <keyword token="["/>
      <rule_reference ruleName="type" optional="false"/>
      <keyword token=":"/>
      <rule_reference ruleName="type" optional="false"/>
      <keyword token="]"/>
    </production>
  </rule>
  <rule name="optional-type">
    <production>
      <rule_reference ruleName="type" optional="false"/>
      <keyword token="?"/>
    </production>
  </rule>
  <rule name="implicitly-unwrapped-optional-type">
    <production>
      <rule_reference ruleName="type" optional="false"/>
      <keyword token="!"/>
    </production>
  </rule>
  <rule name="protocol-composition-type">
    <production>
      <keyword token="protocol"/>
      <keyword token="&lt;"/>
      <rule_reference ruleName="protocol-identifier-list" optional="true"/>
      <keyword token="&gt;"/>
    </production>
  </rule>
  <rule name="protocol-identifier-list">
    <production>
      <rule_reference ruleName="protocol-identifier" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="protocol-identifier" optional="false"/>
      <keyword token=","/>
      <rule_reference ruleName="protocol-identifier-list" optional="false"/>
    </production>
  </rule>
  <rule name="protocol-identifier">
    <production>
      <rule_reference ruleName="type-identifier" optional="false"/>
    </production>
  </rule>
  <rule name="metatype-type">
    <production>
      <rule_reference ruleName="type" optional="false"/>
      <keyword token="."/>
      <keyword token="Type"/>
    </production>
    <production>
      <rule_reference ruleName="type" optional="false"/>
      <keyword token="."/>
      <keyword token="Protocol"/>
    </production>
  </rule>
  <rule name="type-inheritance-clause">
    <production>
      <keyword token=":"/>
      <rule_reference ruleName="class-requirement" optional="false"/>
      <keyword token=","/>
      <rule_reference ruleName="type-inheritance-list" optional="false"/>
    </production>
    <production>
      <keyword token=":"/>
      <rule_reference ruleName="class-requirement" optional="false"/>
    </production>
    <production>
      <keyword token=":"/>
      <rule_reference ruleName="type-inheritance-list" optional="false"/>
    </production>
  </rule>
  <rule name="type-inheritance-list">
    <production>
      <rule_reference ruleName="type-identifier" optional="false"/>
    </production>
    <production>
      <rule_reference ruleName="type-identifier" optional="false"/>
      <keyword token=","/>
      <rule_reference ruleName="type-inheritance-list" optional="false"/>
    </production>
  </rule>
  <rule name="class-requirement">
    <production>
      <keyword token="class"/>
    </production>
  </rule>
</rules>
